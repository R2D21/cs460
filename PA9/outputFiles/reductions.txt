
=================================================================
Line #1: 
int x;
type_specifier : INT;
declaration_specifiers : type_specifier;
identifier : IDENTIFIER;
direct_declarator : identifier;
declarator : direct_declarator;
init_declarator : declarator;
init_declarator_list : init_declarator;
declaration : declaration_specifiers init_declarator_list SEMI;
external_declaration : declaration;
translation_unit : external_declaration;

=================================================================
Line #2: 
int y;
type_specifier : INT;
declaration_specifiers : type_specifier;
identifier : IDENTIFIER;
direct_declarator : identifier;
declarator : direct_declarator;
init_declarator : declarator;
init_declarator_list : init_declarator;
declaration : declaration_specifiers init_declarator_list SEMI;
external_declaration : declaration;
translation_unit : translation_unit external_declaration;

=================================================================
Line #3: 


=================================================================
Line #4: 
void main(){
type_specifier : VOID;
declaration_specifiers : type_specifier;
identifier : IDENTIFIER;
direct_declarator : identifier;
direct_declarator : direct_declarator LPAREN RPAREN;
declarator : direct_declarator;

=================================================================
Line #5: 


=================================================================
Line #6: 
	// declaring constants and single variables

=================================================================
Line #7: 
	int i = 1;
set_insert_push : inInsertMode = true
set_insert : inInsertMode = true
type_specifier : INT;
declaration_specifiers : type_specifier;
identifier : IDENTIFIER;
direct_declarator : identifier;
declarator : direct_declarator;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
initializer : assignment_expression;
set_insert : inInsertMode = true
init_declarator : declarator ASSIGN initializer;
init_declarator_list : init_declarator;
declaration : declaration_specifiers init_declarator_list SEMI;
set_lookup : inInsertMode = false
declaration_list : declaration;

=================================================================
Line #8: 
	int a[3];
set_insert : inInsertMode = true
type_specifier : INT;
declaration_specifiers : type_specifier;
identifier : IDENTIFIER;
direct_declarator : identifier;
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
constant_expression : conditional_expression;
direct_declarator : direct_declarator LBRACK constant_expression RBRACK;
declarator : direct_declarator;
init_declarator : declarator;
init_declarator_list : init_declarator;
declaration : declaration_specifiers init_declarator_list SEMI;
set_lookup : inInsertMode = false
declaration_list : declaration_list declaration;

=================================================================
Line #9: 
	int b[5][6];
set_insert : inInsertMode = true
type_specifier : INT;
declaration_specifiers : type_specifier;
identifier : IDENTIFIER;
direct_declarator : identifier;
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
constant_expression : conditional_expression;
direct_declarator : direct_declarator LBRACK constant_expression RBRACK;
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
constant_expression : conditional_expression;
direct_declarator : direct_declarator LBRACK constant_expression RBRACK;
declarator : direct_declarator;
init_declarator : declarator;
init_declarator_list : init_declarator;
declaration : declaration_specifiers init_declarator_list SEMI;
set_lookup : inInsertMode = false
declaration_list : declaration_list declaration;

=================================================================
Line #10: 


=================================================================
Line #11: 
	// 1D usage on left and right hand side

=================================================================
Line #12: 
	a[2] = i;
set_lookup : inInsertMode = false
identifier : IDENTIFIER;
primary_expression : identifier;
postfix_expression : primary_expression;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
postfix_expression : postfix_expression LBRACK expression RBRACK;
unary_expression : postfix_expression;
assignment_operator : ASSIGN;
identifier : IDENTIFIER;
primary_expression : identifier;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
assignment_expression : unary_expression assignment_operator assignment_expression;
expression : assignment_expression;
expression_statement : expression SEMI;
statement : expression_statement;
statement_list : statement;

=================================================================
Line #13: 
	a[1] = a[2];
identifier : IDENTIFIER;
primary_expression : identifier;
postfix_expression : primary_expression;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
postfix_expression : postfix_expression LBRACK expression RBRACK;
unary_expression : postfix_expression;
assignment_operator : ASSIGN;
identifier : IDENTIFIER;
primary_expression : identifier;
postfix_expression : primary_expression;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
postfix_expression : postfix_expression LBRACK expression RBRACK;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
assignment_expression : unary_expression assignment_operator assignment_expression;
expression : assignment_expression;
expression_statement : expression SEMI;
statement : expression_statement;
statement_list : statement_list statement;

=================================================================
Line #14: 


=================================================================
Line #15: 


=================================================================
Line #16: 
	// 2d usage on left and right hand side

=================================================================
Line #17: 
	b[3][4] = i;
identifier : IDENTIFIER;
primary_expression : identifier;
postfix_expression : primary_expression;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
postfix_expression : postfix_expression LBRACK expression RBRACK;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
postfix_expression : postfix_expression LBRACK expression RBRACK;
unary_expression : postfix_expression;
assignment_operator : ASSIGN;
identifier : IDENTIFIER;
primary_expression : identifier;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
assignment_expression : unary_expression assignment_operator assignment_expression;
expression : assignment_expression;
expression_statement : expression SEMI;
statement : expression_statement;
statement_list : statement_list statement;

=================================================================
Line #18: 
	b[2][0] = b[3][4];
identifier : IDENTIFIER;
primary_expression : identifier;
postfix_expression : primary_expression;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
postfix_expression : postfix_expression LBRACK expression RBRACK;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
postfix_expression : postfix_expression LBRACK expression RBRACK;
unary_expression : postfix_expression;
assignment_operator : ASSIGN;
identifier : IDENTIFIER;
primary_expression : identifier;
postfix_expression : primary_expression;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
postfix_expression : postfix_expression LBRACK expression RBRACK;
set_lookup : inInsertMode = false
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
postfix_expression : postfix_expression LBRACK expression RBRACK;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
assignment_expression : unary_expression assignment_operator assignment_expression;
expression : assignment_expression;
expression_statement : expression SEMI;
statement : expression_statement;
statement_list : statement_list statement;

=================================================================
Line #19: 


=================================================================
Line #20: 
}
set_lookup_pop : inInsertMode = false
compound_statement : LCURL declaration_list statement_list RCURL;
function_definition : declaration_specifiers declarator compound_statement;
external_declaration : function_definition;
translation_unit : translation_unit external_declaration;
