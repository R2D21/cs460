digraph{
type_specifier -> VOID;
declaration_specifiers -> type_specifier;
identifier -> IDENTIFIER;
direct_declarator -> identifier;
direct_declarator -> {direct_declarator LPAREN RPAREN};
declarator -> direct_declarator;
type_specifier -> INT;
declaration_specifiers -> type_specifier;
identifier -> IDENTIFIER;
direct_declarator -> identifier;
constant -> INTEGER_CONSTANT;
primary_expression -> constant;
postfix_expression -> primary_expression;
unary_expression -> postfix_expression;
cast_expression -> unary_expression;
multiplicative_expression -> cast_expression;
additive_expression -> multiplicative_expression;
shift_expression -> additive_expression;
relational_expression -> shift_expression;
equality_expression -> relational_expression;
and_expression -> equality_expression;
exclusive_or_expression -> and_expression;
inclusive_or_expression -> exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_or_expression -> logical_and_expression;
conditional_expression -> logical_or_expression;
constant_expression -> conditional_expression;
direct_declarator -> {direct_declarator LBRACK constant_expression RBRACK};
constant -> INTEGER_CONSTANT;
primary_expression -> constant;
postfix_expression -> primary_expression;
unary_expression -> postfix_expression;
cast_expression -> unary_expression;
multiplicative_expression -> cast_expression;
additive_expression -> multiplicative_expression;
shift_expression -> additive_expression;
relational_expression -> shift_expression;
equality_expression -> relational_expression;
and_expression -> equality_expression;
exclusive_or_expression -> and_expression;
inclusive_or_expression -> exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_or_expression -> logical_and_expression;
conditional_expression -> logical_or_expression;
constant_expression -> conditional_expression;
direct_declarator -> {direct_declarator LBRACK constant_expression RBRACK};
declarator -> direct_declarator;
init_declarator -> declarator;
init_declarator_list -> init_declarator;
declaration -> {declaration_specifiers init_declarator_list SEMI};
declaration_list -> declaration;
type_specifier -> INT;
declaration_specifiers -> type_specifier;
identifier -> IDENTIFIER;
direct_declarator -> identifier;
declarator -> direct_declarator;
constant -> INTEGER_CONSTANT;
primary_expression -> constant;
postfix_expression -> primary_expression;
unary_expression -> postfix_expression;
cast_expression -> unary_expression;
multiplicative_expression -> cast_expression;
additive_expression -> multiplicative_expression;
shift_expression -> additive_expression;
relational_expression -> shift_expression;
equality_expression -> relational_expression;
and_expression -> equality_expression;
exclusive_or_expression -> and_expression;
inclusive_or_expression -> exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_or_expression -> logical_and_expression;
conditional_expression -> logical_or_expression;
assignment_expression -> conditional_expression;
initializer -> assignment_expression;
init_declarator -> {declarator ASSIGN initializer};
init_declarator_list -> init_declarator;
declaration -> {declaration_specifiers init_declarator_list SEMI};
declaration_list -> {declaration_list declaration};
identifier -> IDENTIFIER;
primary_expression -> identifier;
postfix_expression -> primary_expression;
constant -> INTEGER_CONSTANT;
primary_expression -> constant;
postfix_expression -> primary_expression;
unary_expression -> postfix_expression;
cast_expression -> unary_expression;
multiplicative_expression -> cast_expression;
additive_expression -> multiplicative_expression;
shift_expression -> additive_expression;
relational_expression -> shift_expression;
equality_expression -> relational_expression;
and_expression -> equality_expression;
exclusive_or_expression -> and_expression;
inclusive_or_expression -> exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_or_expression -> logical_and_expression;
conditional_expression -> logical_or_expression;
assignment_expression -> conditional_expression;
expression -> assignment_expression;
postfix_expression -> {postfix_expression LBRACK expression RBRACK};
constant -> INTEGER_CONSTANT;
primary_expression -> constant;
postfix_expression -> primary_expression;
unary_expression -> postfix_expression;
cast_expression -> unary_expression;
multiplicative_expression -> cast_expression;
additive_expression -> multiplicative_expression;
shift_expression -> additive_expression;
relational_expression -> shift_expression;
equality_expression -> relational_expression;
and_expression -> equality_expression;
exclusive_or_expression -> and_expression;
inclusive_or_expression -> exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_or_expression -> logical_and_expression;
conditional_expression -> logical_or_expression;
assignment_expression -> conditional_expression;
expression -> assignment_expression;
postfix_expression -> {postfix_expression LBRACK expression RBRACK};
unary_expression -> postfix_expression;
assignment_operator -> ASSIGN;
identifier -> IDENTIFIER;
primary_expression -> identifier;
postfix_expression -> primary_expression;
unary_expression -> postfix_expression;
cast_expression -> unary_expression;
multiplicative_expression -> cast_expression;
additive_expression -> multiplicative_expression;
shift_expression -> additive_expression;
relational_expression -> shift_expression;
equality_expression -> relational_expression;
and_expression -> equality_expression;
exclusive_or_expression -> and_expression;
inclusive_or_expression -> exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_or_expression -> logical_and_expression;
conditional_expression -> logical_or_expression;
assignment_expression -> conditional_expression;
assignment_expression -> {unary_expression assignment_operator assignment_expression};
expression -> assignment_expression;
expression_statement -> {expression SEMI};
statement -> expression_statement;
statement_list -> statement;
identifier -> IDENTIFIER;
primary_expression -> identifier;
postfix_expression -> primary_expression;
unary_expression -> postfix_expression;
assignment_operator -> ASSIGN;
identifier -> IDENTIFIER;
primary_expression -> identifier;
postfix_expression -> primary_expression;
constant -> INTEGER_CONSTANT;
primary_expression -> constant;
postfix_expression -> primary_expression;
unary_expression -> postfix_expression;
cast_expression -> unary_expression;
multiplicative_expression -> cast_expression;
additive_expression -> multiplicative_expression;
shift_expression -> additive_expression;
relational_expression -> shift_expression;
equality_expression -> relational_expression;
and_expression -> equality_expression;
exclusive_or_expression -> and_expression;
inclusive_or_expression -> exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_or_expression -> logical_and_expression;
conditional_expression -> logical_or_expression;
assignment_expression -> conditional_expression;
expression -> assignment_expression;
postfix_expression -> {postfix_expression LBRACK expression RBRACK};
constant -> INTEGER_CONSTANT;
primary_expression -> constant;
postfix_expression -> primary_expression;
unary_expression -> postfix_expression;
cast_expression -> unary_expression;
multiplicative_expression -> cast_expression;
additive_expression -> multiplicative_expression;
shift_expression -> additive_expression;
relational_expression -> shift_expression;
equality_expression -> relational_expression;
and_expression -> equality_expression;
exclusive_or_expression -> and_expression;
inclusive_or_expression -> exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_or_expression -> logical_and_expression;
conditional_expression -> logical_or_expression;
assignment_expression -> conditional_expression;
expression -> assignment_expression;
postfix_expression -> {postfix_expression LBRACK expression RBRACK};
unary_expression -> postfix_expression;
cast_expression -> unary_expression;
multiplicative_expression -> cast_expression;
additive_expression -> multiplicative_expression;
shift_expression -> additive_expression;
relational_expression -> shift_expression;
equality_expression -> relational_expression;
and_expression -> equality_expression;
exclusive_or_expression -> and_expression;
inclusive_or_expression -> exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_or_expression -> logical_and_expression;
conditional_expression -> logical_or_expression;
assignment_expression -> conditional_expression;
assignment_expression -> {unary_expression assignment_operator assignment_expression};
expression -> assignment_expression;
expression_statement -> {expression SEMI};
statement -> expression_statement;
statement_list -> {statement_list statement};
compound_statement -> {LCURL declaration_list statement_list RCURL};
function_definition -> {declaration_specifiers declarator compound_statement};
external_declaration -> function_definition;
translation_unit -> external_declaration;
start_unit -> translation_unit;
}
