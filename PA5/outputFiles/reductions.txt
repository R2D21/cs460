
=================================================================
Line #1: 
int function(int x, char y);
type_specifier : INT;
declaration_specifiers : type_specifier;
direct_declarator : identifier;
type_specifier : INT;
declaration_specifiers : type_specifier;
direct_declarator : identifier;
declarator : direct_declarator;
parameter_declaration : declaration_specifiers declarator;
parameter_list : parameter_declaration;
type_specifier : CHAR;
declaration_specifiers : type_specifier;
direct_declarator : identifier;
declarator : direct_declarator;
parameter_declaration : declaration_specifiers declarator;
parameter_list : parameter_list COMMA parameter_declaration;
parameter_type_list : parameter_list;
direct_declarator : direct_declarator LPAREN parameter_type_list RPAREN;
declarator : direct_declarator;
init_declarator : declarator;
init_declarator_list : init_declarator;
declaration : declaration_specifiers init_declarator_list SEMI;
external_declaration : declaration;
translation_unit : external_declaration;

=================================================================
Line #2: 
void main(void) {
type_specifier : VOID;
declaration_specifiers : type_specifier;
direct_declarator : identifier;
type_specifier : VOID;
declaration_specifiers : type_specifier;
parameter_declaration : declaration_specifiers;
parameter_list : parameter_declaration;
parameter_type_list : parameter_list;
direct_declarator : direct_declarator LPAREN parameter_type_list RPAREN;
declarator : direct_declarator;

=================================================================
Line #3: 
	int a = 1;
type_specifier : INT;
declaration_specifiers : type_specifier;
direct_declarator : identifier;
declarator : direct_declarator;
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
initializer : assignment_expression;
init_declarator : declarator ASSIGN initializer;
init_declarator_list : init_declarator;
declaration : declaration_specifiers init_declarator_list SEMI;
declaration_list : declaration;

=================================================================
Line #4: 
	int b = 2;
type_specifier : INT;
declaration_specifiers : type_specifier;
direct_declarator : identifier;
declarator : direct_declarator;
constant : INTEGER_CONSTANT;
primary_expression : constant;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
initializer : assignment_expression;
init_declarator : declarator ASSIGN initializer;
init_declarator_list : init_declarator;
declaration : declaration_specifiers init_declarator_list SEMI;
declaration_list : declaration_list declaration;

=================================================================
Line #5: 
	function(a, b);
primary_expression : identifier;
postfix_expression : primary_expression;
primary_expression : identifier;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
argument_expression_list : assignment_expression;
primary_expression : identifier;
postfix_expression : primary_expression;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
argument_expression_list : argument_expression_list COMMA assignment_expression;
postfix_expression : primary_expression LPAREN argument_expression_list RPAREN;
unary_expression : postfix_expression;
cast_expression : unary_expression;
multiplicative_expression : cast_expression;
additive_expression : multiplicative_expression;
shift_expression : additive_expression;
relational_expression : shift_expression;
equality_expression : relational_expression;
and_expression : equality_expression;
exclusive_or_expression : and_expression;
inclusive_or_expression : exclusive_or_expression;
logical_and_expression : inclusive_or_expression;
logical_or_expression : logical_and_expression;
conditional_expression : logical_or_expression;
assignment_expression : conditional_expression;
expression : assignment_expression;
expression_statement : expression SEMI;
statement : expression_statement;
statement_list : statement;

=================================================================
Line #6: 
}
compound_statement : LCURL declaration_list statement_list RCURL;
function_definition : declaration_specifiers declarator compound_statement;
external_declaration : function_definition;
translation_unit : translation_unit external_declaration;
